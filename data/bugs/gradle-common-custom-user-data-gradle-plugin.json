{"repository": "gradle/common-custom-user-data-gradle-plugin", "language": "java", "clone_url": "https://github.com/gradle/common-custom-user-data-gradle-plugin.git", "collection_timestamp": "2023-11-25T02:38:19.006070Z", "commit_hash": "982c77984b5e263fe8abf40fb0b8ed7dfd0a5b82", "commit_message": "Merge pull request #193 from gradle/tylerbertrand/fix-git-repo-pattern\n\nHandle embedded user info in git repo url", "commit_timestamp": "2023-07-05T17:15:58Z", "previous_commit_hash": "ffb66dd7b41dd42ffef3b5f1c2a9b388b737f6e6", "previous_commit_message": "Bump Gradle Wrapper from 8.1.1 to 8.2 (#194)\n\nCo-authored-by: bot-githubaction <bot-githubaction@gradle.com>", "previous_commit_timestamp": "2023-07-03T07:38:38Z", "time_to_patch": "2 days, 9:37:20", "bug_patch": "diff --git a/src/main/java/com/gradle/Utils.java b/src/main/java/com/gradle/Utils.java\nindex e96500e..1c068c4 100644\n--- a/src/main/java/com/gradle/Utils.java\n+++ b/src/main/java/com/gradle/Utils.java\n@@ -29,7 +29,7 @@ import java.util.regex.Pattern;\n \n final class Utils {\n \n-    private static final Pattern GIT_REPO_URI_PATTERN = Pattern.compile(\"^(?:(?:https://|git://)|(?:ssh)?.*?@)(.*?(?:github|gitlab).*?)(?:/|:[0-9]*?/|:)(.*?)(?:\\\\.git)?$\");\n+    private static final Pattern GIT_REPO_URI_PATTERN = Pattern.compile(\"^(?:(?:https://|git://)(?:.+:.+@)?|(?:ssh)?.*?@)(.*?(?:github|gitlab).*?)(?:/|:[0-9]*?/|:)(.*?)(?:\\\\.git)?$\");\n \n     static Optional<String> sysPropertyOrEnvVariable(String sysPropertyName, String envVarName, ProviderFactory providers) {\n         Optional<String> sysProperty = sysProperty(sysPropertyName, providers);\n", "bug_patch_file_extensions": ["java"], "test_patch": "diff --git a/src/test/java/com/gradle/UtilsTest.java b/src/test/java/com/gradle/UtilsTest.java\nindex a161a6c..2395a19 100644\n--- a/src/test/java/com/gradle/UtilsTest.java\n+++ b/src/test/java/com/gradle/UtilsTest.java\n@@ -1,22 +1,64 @@\n package com.gradle;\n \n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.ArgumentsProvider;\n+import org.junit.jupiter.params.provider.ArgumentsSource;\n \n import java.net.URI;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import static com.gradle.Utils.toWebRepoUri;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n public class UtilsTest {\n-    @Test\n-    public void toWebRepoUri_git() {\n-        assertEquals(URI.create(\"https://github.com/acme-inc/my-project\"), toWebRepoUri(\"git://github.com/acme-inc/my-project.git\").get());\n-        assertEquals(URI.create(\"https://gitlab.com/acme-inc/my-project\"), toWebRepoUri(\"git://gitlab.com/acme-inc/my-project.git\").get());\n+\n+    @ParameterizedTest\n+    @ArgumentsSource(WebRepoUriArgumentsProvider.class)\n+    public void testToWebRepoUri(String repositoryHost, String repositoryUri) {\n+        URI expectedWebRepoUri = URI.create(String.format(\"https://%s.com/acme-inc/my-project\", repositoryHost));\n+        assertEquals(Optional.of(expectedWebRepoUri), toWebRepoUri(String.format(repositoryUri, repositoryHost)));\n+    }\n+\n+    @ParameterizedTest\n+    @ArgumentsSource(EnterpriseWebRepoUriArgumentsProvider.class)\n+    public void testToWebRepoUri_enterpriseUri(String repositoryHost, String repositoryUri) {\n+        URI expectedWebRepoUri = URI.create(String.format(\"https://%s.acme.com/acme-inc/my-project\", repositoryHost));\n+        assertEquals(Optional.of(expectedWebRepoUri), toWebRepoUri(String.format(repositoryUri, repositoryHost)));\n     }\n \n-    @Test\n-    public void toWebRepoUri_https() {\n-        assertEquals(URI.create(\"https://github.com/acme-inc/my-project\"), toWebRepoUri(\"https://github.com/acme-inc/my-project\").get());\n-        assertEquals(URI.create(\"https://gitlab.com/acme-inc/my-project\"), toWebRepoUri(\"https://gitlab.com/acme-inc/my-project\").get());\n+    private static class WebRepoUriArgumentsProvider implements ArgumentsProvider {\n+\n+        @Override\n+        public Stream<? extends Arguments> provideArguments(ExtensionContext context) {\n+            Set<String> host = Stream.of(\"github\", \"gitlab\").collect(Collectors.toSet());\n+            Set<String> remoteRepositoryUris = Stream.of(\n+                    \"https://%s.com/acme-inc/my-project\",\n+                    \"https://%s.com:443/acme-inc/my-project\",\n+                    \"https://user:secret@%s.com/acme-inc/my-project\",\n+                    \"ssh://git@%s.com/acme-inc/my-project.git\",\n+                    \"ssh://git@%s.com:22/acme-inc/my-project.git\",\n+                    \"git://%s.com/acme-inc/my-project.git\",\n+                    \"git@%s.com/acme-inc/my-project.git\"\n+            ).collect(Collectors.toSet());\n+            return host.stream().flatMap(h -> remoteRepositoryUris.stream().map(r -> Arguments.arguments(h, r)));\n+        }\n+    }\n+\n+    private static class EnterpriseWebRepoUriArgumentsProvider implements ArgumentsProvider {\n+\n+        @Override\n+        public Stream<? extends Arguments> provideArguments(ExtensionContext context) {\n+            Set<String> host = Stream.of(\"github\", \"gitlab\").collect(Collectors.toSet());\n+            Set<String> remoteRepositoryUris = Stream.of(\n+                    \"https://%s.acme.com/acme-inc/my-project\",\n+                    \"git@%s.acme.com/acme-inc/my-project.git\"\n+            ).collect(Collectors.toSet());\n+            return host.stream().flatMap(h -> remoteRepositoryUris.stream().map(r -> Arguments.arguments(h, r)));\n+        }\n     }\n }\n", "test_patch_file_extensions": ["java"], "non_code_patch": "diff --git a/release/changes.md b/release/changes.md\nindex e69de29..e4248d0 100644\n--- a/release/changes.md\n+++ b/release/changes.md\n@@ -0,0 +1,1 @@\n+- [FIX] Generates incorrect links to source repositories when repository URL contains embedded user info\n", "non_code_patch_file_extensions": ["md"], "change_type": "MIXED", "actions_runs": [[{"failed": false, "tests": [{"classname": "com.gradle.UtilsTest", "name": "toWebRepoUri_https()", "time": 0.016, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "toWebRepoUri_git()", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/1106faf3-81f4-4bf6-950e-090ce4c6508b/.github/workflows/build-verification-crawler.yml", "type": "gradle"}, "workflow_name": "0c219dbc-34a3-4221-9508-9223064cfc3a", "build_tool": "gradle", "elapsed_time": 146.13821125030518, "default_actions": false}], [{"failed": false, "tests": [{"classname": "com.gradle.UtilsTest", "name": "[1] github, https://%s.acme.com/acme-inc/my-project", "time": 0.104, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[2] github, git@%s.acme.com/acme-inc/my-project.git", "time": 0.007, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[3] gitlab, https://%s.acme.com/acme-inc/my-project", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[4] gitlab, git@%s.acme.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[1] github, git://%s.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[2] github, https://user:secret@%s.com/acme-inc/my-project", "time": 0.006, "results": [{"result": "Failure", "message": "org.opentest4j.AssertionFailedError: expected: <Optional[https://github.com/acme-inc/my-project]> but was: <Optional.empty>", "type": "org.opentest4j.AssertionFailedError"}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[3] github, ssh://git@%s.com:22/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[4] github, https://%s.com/acme-inc/my-project", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[5] github, git@%s.com/acme-inc/my-project.git", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[6] github, ssh://git@%s.com/acme-inc/my-project.git", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[7] github, https://%s.com:443/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[8] gitlab, git://%s.com/acme-inc/my-project.git", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[9] gitlab, https://user:secret@%s.com/acme-inc/my-project", "time": 0.002, "results": [{"result": "Failure", "message": "org.opentest4j.AssertionFailedError: expected: <Optional[https://gitlab.com/acme-inc/my-project]> but was: <Optional.empty>", "type": "org.opentest4j.AssertionFailedError"}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[10] gitlab, ssh://git@%s.com:22/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[11] gitlab, https://%s.com/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[12] gitlab, git@%s.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[13] gitlab, ssh://git@%s.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[14] gitlab, https://%s.com:443/acme-inc/my-project", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/1106faf3-81f4-4bf6-950e-090ce4c6508b/.github/workflows/build-verification-crawler.yml", "type": "gradle"}, "workflow_name": "acc233a0-25aa-4031-94e0-f1e324f37a1d", "build_tool": "gradle", "elapsed_time": 149.55778002738953, "default_actions": false}], [{"failed": false, "tests": [{"classname": "com.gradle.UtilsTest", "name": "[1] github, https://%s.acme.com/acme-inc/my-project", "time": 0.035, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[2] github, git@%s.acme.com/acme-inc/my-project.git", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[3] gitlab, https://%s.acme.com/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[4] gitlab, git@%s.acme.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[1] github, git://%s.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[2] github, https://user:secret@%s.com/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[3] github, ssh://git@%s.com:22/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[4] github, https://%s.com/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[5] github, git@%s.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[6] github, ssh://git@%s.com/acme-inc/my-project.git", "time": 0.004, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[7] github, https://%s.com:443/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[8] gitlab, git://%s.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[9] gitlab, https://user:secret@%s.com/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[10] gitlab, ssh://git@%s.com:22/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[11] gitlab, https://%s.com/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[12] gitlab, git@%s.com/acme-inc/my-project.git", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[13] gitlab, ssh://git@%s.com/acme-inc/my-project.git", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.gradle.UtilsTest", "name": "[14] gitlab, https://%s.com:443/acme-inc/my-project", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/1106faf3-81f4-4bf6-950e-090ce4c6508b/.github/workflows/build-verification-crawler.yml", "type": "gradle"}, "workflow_name": "b9c7131c-aeec-4447-a1b0-d938334a2674", "build_tool": "gradle", "elapsed_time": 128.5724618434906, "default_actions": false}]], "strategy": "PASS_PASS", "issues": [{"id": 193, "title": "Handle embedded user info in git repo url", "body": "Fixes #191\r\n\r\nUpdate `GIT_REPO_URI_PATTERN` to properly handle embedded user info in git repository URL\r\n\r\n### Tests\r\n* `https://gitlab-svc-user:secret@gitlab.self-hosted.com/foo/bar.git`: https://ge.solutions-team.gradle.com/s/b54q5wdxtkef4#info\r\n* `https://github.com/gradle/common-custom-user-data-gradle-plugin.git`: https://ge.solutions-team.gradle.com/s/yv6hrmnldvo3e#info", "comments": ["> Some unit tests would help to make sure the regular expression is parsing as expected\r\n\r\n@jprinet Added tests to ensure different variations of the remote repository uri are parsed as expected", "> > Some unit tests would help to make sure the regular expression is parsing as expected\r\n> \r\n> @jprinet Added tests to ensure different variations of the remote repository uri are parsed as expected\r\n\r\nThanks @tylerbertrand, that's way better like this \ud83d\udc4f, I left a comment that you may take into account."], "labels": [], "is_pull_request": true, "review_comments": ["Didn't try but wouldn't `.+` be simpler than `.*?` ?", "Yep you're right I think that is more correct", "Very nice, don't want to be annoying but we could factorize the `Stream` creation and have only the `Set` of `remoteRepositoryUris` being different in the 2 `ArgumentsProvider` implementations.", "Good to create tests for these cases!\r\nCan you tell me more about the decision to use a parameterized test here vs just having a list of values in the test itself?", "Sure. I think parameterized tests are perfectly suited for this kind of test, where the test logic is the same, but the test needs to execute against different inputs or combinations of inputs.\r\n\r\nI think it makes tests more readable. With parameterized tests, the test method just contains test logic, and setting up test data is extracted to an argument provider of some sort.\r\n\r\nI also like that each input is tested in its own test execution. In the test report it's much clearer whether the test failed against all inputs or just a subset of the inputs, and you get individual test results for each input.", "That sounds great!", "No worries! So I gave it a shot, and I think I prefer it as-is, since what's being duplicated is very small, and only in two places. If further related argument providers were added, I'd probably be in favor of de-duplicating that."]}]}
