{"repository": "dmak/jaxb-xew-plugin", "language": "java", "clone_url": "https://github.com/dmak/jaxb-xew-plugin.git", "collection_timestamp": "2023-11-24T03:46:20.503435Z", "commit_hash": "f48935133d6ad30ad31613fca3b64db50f77fd26", "commit_message": "Correctly handling the case when class names are registered in upper case (fixes #74).", "commit_timestamp": "2023-08-20T23:16:05Z", "previous_commit_hash": "f2320aaa24d70d087ff24edc326912ac22d1acb8", "previous_commit_message": "[maven-release-plugin] prepare for next development iteration\n", "previous_commit_timestamp": "2023-01-23T14:57:03Z", "time_to_patch": "209 days, 8:19:02", "bug_patch": "diff --git a/src/main/java/com/sun/tools/xjc/addon/xew/XmlElementWrapperPlugin.java b/src/main/java/com/sun/tools/xjc/addon/xew/XmlElementWrapperPlugin.java\nindex f8e9fcc..8131336 100644\n--- a/src/main/java/com/sun/tools/xjc/addon/xew/XmlElementWrapperPlugin.java\n+++ b/src/main/java/com/sun/tools/xjc/addon/xew/XmlElementWrapperPlugin.java\n@@ -904,12 +904,18 @@ public class XmlElementWrapperPlugin extends AbstractConfigurablePlugin {\n \t\t\t}\n \t\t}\n \n-\t\tif (classes.containsKey(clazz.name())) {\n-\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + parent.name() + clazz.name());\n-\t\t\tsetPrivateField(clazz, \"name\", parent.name() + clazz.name());\n+\t\t// Rename the class in case there is class name collision.\n+\t\t// FIXME: Should that be doublechecked after renaming?\n+\t\tif (classes.containsKey(clazz.name()) || classes.containsKey(clazz.name().toUpperCase())) {\n+\t\t\tString newName = parent.name() + clazz.name();\n+\t\t\twriteSummary(\"\\tRenaming class \" + clazz.fullName() + \" to class \" + newName);\n+\t\t\tsetPrivateField(clazz, \"name\", newName);\n \t\t}\n \n-\t\tclasses.put(clazz.name(), clazz);\n+\t\t// Special treatment for the case when \"classes\" map holds class names in upper case\n+\t\t// (true for case-sensitive filesystems, see usages of JCodeModel.isCaseSensitiveFileSystem):\n+\t\tboolean allClassNamesInUpperCase = classes.keySet().stream().allMatch(key -> key.equals(key.toUpperCase()));\n+\t\tclasses.put(allClassNamesInUpperCase ? clazz.name().toUpperCase() : clazz.name(), clazz);\n \n \t\t// Finally modify the class so that it refers back the container:\n \t\tsetPrivateField(clazz, \"outer\", grandParent);\n", "bug_patch_file_extensions": ["java"], "test_patch": "diff --git a/src/test/generated_resources/inner_scoped_element/Catalogue.java b/src/test/generated_resources/inner_scoped_element/Catalogue.java\nindex da83bf3..bd7e319 100644\n--- a/src/test/generated_resources/inner_scoped_element/Catalogue.java\n+++ b/src/test/generated_resources/inner_scoped_element/Catalogue.java\n@@ -1,140 +1,140 @@\n-\r\n-package inner_scoped_element;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-import jakarta.xml.bind.JAXBElement;\r\n-import jakarta.xml.bind.annotation.XmlAccessType;\r\n-import jakarta.xml.bind.annotation.XmlAccessorType;\r\n-import jakarta.xml.bind.annotation.XmlElement;\r\n-import jakarta.xml.bind.annotation.XmlElementRef;\r\n-import jakarta.xml.bind.annotation.XmlElementRefs;\r\n-import jakarta.xml.bind.annotation.XmlElementWrapper;\r\n-import jakarta.xml.bind.annotation.XmlRootElement;\r\n-import jakarta.xml.bind.annotation.XmlType;\r\n-\r\n-\r\n-/**\r\n- * <p>Java class for anonymous complex type.\r\n- * \r\n- * <p>The following schema fragment specifies the expected content contained within this class.\r\n- * \r\n- * <pre>\r\n- * &lt;complexType&gt;\r\n- *   &lt;complexContent&gt;\r\n- *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\r\n- *       &lt;sequence&gt;\r\n- *         &lt;element name=\"stockage_collection\"&gt;\r\n- *           &lt;complexType&gt;\r\n- *             &lt;complexContent&gt;\r\n- *               &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\r\n- *                 &lt;sequence minOccurs=\"0\"&gt;\r\n- *                   &lt;element name=\"stockage\" maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\r\n- *                     &lt;complexType&gt;\r\n- *                       &lt;complexContent&gt;\r\n- *                         &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\r\n- *                           &lt;all&gt;\r\n- *                             &lt;element name=\"collection\" minOccurs=\"0\"&gt;\r\n- *                               &lt;complexType&gt;\r\n- *                                 &lt;complexContent&gt;\r\n- *                                   &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\r\n- *                                     &lt;sequence maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\r\n- *                                       &lt;element name=\"effect\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\r\n- *                                       &lt;element name=\"term\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\r\n- *                                     &lt;/sequence&gt;\r\n- *                                   &lt;/restriction&gt;\r\n- *                                 &lt;/complexContent&gt;\r\n- *                               &lt;/complexType&gt;\r\n- *                             &lt;/element&gt;\r\n- *                           &lt;/all&gt;\r\n- *                         &lt;/restriction&gt;\r\n- *                       &lt;/complexContent&gt;\r\n- *                     &lt;/complexType&gt;\r\n- *                   &lt;/element&gt;\r\n- *                 &lt;/sequence&gt;\r\n- *               &lt;/restriction&gt;\r\n- *             &lt;/complexContent&gt;\r\n- *           &lt;/complexType&gt;\r\n- *         &lt;/element&gt;\r\n- *       &lt;/sequence&gt;\r\n- *     &lt;/restriction&gt;\r\n- *   &lt;/complexContent&gt;\r\n- * &lt;/complexType&gt;\r\n- * </pre>\r\n- * \r\n- * \r\n- */\r\n-@XmlAccessorType(XmlAccessType.FIELD)\r\n-@XmlType(name = \"\", propOrder = {\r\n-    \"stockageCollection\"\r\n-})\r\n-@XmlRootElement(name = \"catalogue\")\r\n-public class Catalogue {\r\n-\r\n-    @XmlElementWrapper(name = \"stockage_collection\", required = true)\r\n-    @XmlElement(name = \"stockage\")\r\n-    protected List<Catalogue.Stockage> stockageCollection = new ArrayList<Catalogue.Stockage>();\r\n-\r\n-    public List<Catalogue.Stockage> getStockageCollection() {\r\n-        return stockageCollection;\r\n-    }\r\n-\r\n-    public void setStockageCollection(List<Catalogue.Stockage> stockageCollection) {\r\n-        this.stockageCollection = stockageCollection;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * <p>Java class for anonymous complex type.\r\n-     * \r\n-     * <p>The following schema fragment specifies the expected content contained within this class.\r\n-     * \r\n-     * <pre>\r\n-     * &lt;complexType&gt;\r\n-     *   &lt;complexContent&gt;\r\n-     *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\r\n-     *       &lt;all&gt;\r\n-     *         &lt;element name=\"collection\" minOccurs=\"0\"&gt;\r\n-     *           &lt;complexType&gt;\r\n-     *             &lt;complexContent&gt;\r\n-     *               &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\r\n-     *                 &lt;sequence maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\r\n-     *                   &lt;element name=\"effect\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\r\n-     *                   &lt;element name=\"term\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\r\n-     *                 &lt;/sequence&gt;\r\n-     *               &lt;/restriction&gt;\r\n-     *             &lt;/complexContent&gt;\r\n-     *           &lt;/complexType&gt;\r\n-     *         &lt;/element&gt;\r\n-     *       &lt;/all&gt;\r\n-     *     &lt;/restriction&gt;\r\n-     *   &lt;/complexContent&gt;\r\n-     * &lt;/complexType&gt;\r\n-     * </pre>\r\n-     * \r\n-     * \r\n-     */\r\n-    @XmlAccessorType(XmlAccessType.FIELD)\r\n-    @XmlType(name = \"\", propOrder = {\r\n-\r\n-    })\r\n-    public static class Stockage {\r\n-\r\n-        @XmlElementWrapper\r\n-        @XmlElementRefs({\r\n-            @XmlElementRef(name = \"effect\", type = JAXBElement.class, required = false),\r\n-            @XmlElementRef(name = \"term\", type = JAXBElement.class, required = false)\r\n-        })\r\n-        protected List<JAXBElement<String>> collection = new ArrayList<JAXBElement<String>>();\r\n-\r\n-        public List<JAXBElement<String>> getCollection() {\r\n-            return collection;\r\n-        }\r\n-\r\n-        public void setCollection(List<JAXBElement<String>> collection) {\r\n-            this.collection = collection;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-}\r\n+\n+package inner_scoped_element;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import jakarta.xml.bind.JAXBElement;\n+import jakarta.xml.bind.annotation.XmlAccessType;\n+import jakarta.xml.bind.annotation.XmlAccessorType;\n+import jakarta.xml.bind.annotation.XmlElement;\n+import jakarta.xml.bind.annotation.XmlElementRef;\n+import jakarta.xml.bind.annotation.XmlElementRefs;\n+import jakarta.xml.bind.annotation.XmlElementWrapper;\n+import jakarta.xml.bind.annotation.XmlRootElement;\n+import jakarta.xml.bind.annotation.XmlType;\n+\n+\n+/**\n+ * <p>Java class for anonymous complex type.\n+ * \n+ * <p>The following schema fragment specifies the expected content contained within this class.\n+ * \n+ * <pre>\n+ * &lt;complexType&gt;\n+ *   &lt;complexContent&gt;\n+ *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n+ *       &lt;sequence&gt;\n+ *         &lt;element name=\"stockage\"&gt;\n+ *           &lt;complexType&gt;\n+ *             &lt;complexContent&gt;\n+ *               &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n+ *                 &lt;sequence minOccurs=\"0\"&gt;\n+ *                   &lt;element name=\"stockage\" maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\n+ *                     &lt;complexType&gt;\n+ *                       &lt;complexContent&gt;\n+ *                         &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n+ *                           &lt;all&gt;\n+ *                             &lt;element name=\"collection\" minOccurs=\"0\"&gt;\n+ *                               &lt;complexType&gt;\n+ *                                 &lt;complexContent&gt;\n+ *                                   &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n+ *                                     &lt;sequence maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\n+ *                                       &lt;element name=\"effect\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\n+ *                                       &lt;element name=\"term\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\n+ *                                     &lt;/sequence&gt;\n+ *                                   &lt;/restriction&gt;\n+ *                                 &lt;/complexContent&gt;\n+ *                               &lt;/complexType&gt;\n+ *                             &lt;/element&gt;\n+ *                           &lt;/all&gt;\n+ *                         &lt;/restriction&gt;\n+ *                       &lt;/complexContent&gt;\n+ *                     &lt;/complexType&gt;\n+ *                   &lt;/element&gt;\n+ *                 &lt;/sequence&gt;\n+ *               &lt;/restriction&gt;\n+ *             &lt;/complexContent&gt;\n+ *           &lt;/complexType&gt;\n+ *         &lt;/element&gt;\n+ *       &lt;/sequence&gt;\n+ *     &lt;/restriction&gt;\n+ *   &lt;/complexContent&gt;\n+ * &lt;/complexType&gt;\n+ * </pre>\n+ * \n+ * \n+ */\n+@XmlAccessorType(XmlAccessType.FIELD)\n+@XmlType(name = \"\", propOrder = {\n+    \"stockage\"\n+})\n+@XmlRootElement(name = \"catalogue\")\n+public class Catalogue {\n+\n+    @XmlElementWrapper(required = true)\n+    @XmlElement(name = \"stockage\")\n+    protected List<Catalogue.StockageStockage> stockage = new ArrayList<Catalogue.StockageStockage>();\n+\n+    public List<Catalogue.StockageStockage> getStockage() {\n+        return stockage;\n+    }\n+\n+    public void setStockage(List<Catalogue.StockageStockage> stockage) {\n+        this.stockage = stockage;\n+    }\n+\n+\n+    /**\n+     * <p>Java class for anonymous complex type.\n+     * \n+     * <p>The following schema fragment specifies the expected content contained within this class.\n+     * \n+     * <pre>\n+     * &lt;complexType&gt;\n+     *   &lt;complexContent&gt;\n+     *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n+     *       &lt;all&gt;\n+     *         &lt;element name=\"collection\" minOccurs=\"0\"&gt;\n+     *           &lt;complexType&gt;\n+     *             &lt;complexContent&gt;\n+     *               &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\"&gt;\n+     *                 &lt;sequence maxOccurs=\"unbounded\" minOccurs=\"0\"&gt;\n+     *                   &lt;element name=\"effect\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\n+     *                   &lt;element name=\"term\" type=\"{http://www.w3.org/2001/XMLSchema}string\" minOccurs=\"0\"/&gt;\n+     *                 &lt;/sequence&gt;\n+     *               &lt;/restriction&gt;\n+     *             &lt;/complexContent&gt;\n+     *           &lt;/complexType&gt;\n+     *         &lt;/element&gt;\n+     *       &lt;/all&gt;\n+     *     &lt;/restriction&gt;\n+     *   &lt;/complexContent&gt;\n+     * &lt;/complexType&gt;\n+     * </pre>\n+     * \n+     * \n+     */\n+    @XmlAccessorType(XmlAccessType.FIELD)\n+    @XmlType(name = \"\", propOrder = {\n+\n+    })\n+    public static class StockageStockage {\n+\n+        @XmlElementWrapper\n+        @XmlElementRefs({\n+            @XmlElementRef(name = \"effect\", type = JAXBElement.class, required = false),\n+            @XmlElementRef(name = \"term\", type = JAXBElement.class, required = false)\n+        })\n+        protected List<JAXBElement<String>> collection = new ArrayList<JAXBElement<String>>();\n+\n+        public List<JAXBElement<String>> getCollection() {\n+            return collection;\n+        }\n+\n+        public void setCollection(List<JAXBElement<String>> collection) {\n+            this.collection = collection;\n+        }\n+\n+    }\n+\n+}\ndiff --git a/src/test/generated_resources/inner_scoped_element/ObjectFactory.java b/src/test/generated_resources/inner_scoped_element/ObjectFactory.java\nindex 685a398..ff0d391 100644\n--- a/src/test/generated_resources/inner_scoped_element/ObjectFactory.java\n+++ b/src/test/generated_resources/inner_scoped_element/ObjectFactory.java\n@@ -1,63 +1,63 @@\n-\r\n-package inner_scoped_element;\r\n-\r\n-import javax.xml.namespace.QName;\r\n-import jakarta.xml.bind.JAXBElement;\r\n-import jakarta.xml.bind.annotation.XmlElementDecl;\r\n-import jakarta.xml.bind.annotation.XmlRegistry;\r\n-\r\n-\r\n-/**\r\n- * This object contains factory methods for each \r\n- * Java content interface and Java element interface \r\n- * generated in the inner_scoped_element package. \r\n- * <p>An ObjectFactory allows you to programatically \r\n- * construct new instances of the Java representation \r\n- * for XML content. The Java representation of XML \r\n- * content can consist of schema derived interfaces \r\n- * and classes representing the binding of schema \r\n- * type definitions, element declarations and model \r\n- * groups.  Factory methods for each of these are \r\n- * provided in this class.\r\n- * \r\n- */\r\n-@XmlRegistry\r\n-public class ObjectFactory {\r\n-\r\n-    private final static QName _CatalogueStockageCollectionStockageCollectionEffect_QNAME = new QName(\"\", \"effect\");\r\n-    private final static QName _CatalogueStockageCollectionStockageCollectionTerm_QNAME = new QName(\"\", \"term\");\r\n-\r\n-    /**\r\n-     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: inner_scoped_element\r\n-     * \r\n-     */\r\n-    public ObjectFactory() {\r\n-    }\r\n-\r\n-    /**\r\n-     * Create an instance of {@link Catalogue }\r\n-     * \r\n-     */\r\n-    public Catalogue createCatalogue() {\r\n-        return new Catalogue();\r\n-    }\r\n-\r\n-    /**\r\n-     * Create an instance of {@link Catalogue.Stockage }\r\n-     * \r\n-     */\r\n-    public Catalogue.Stockage createCatalogueStockage() {\r\n-        return new Catalogue.Stockage();\r\n-    }\r\n-\r\n-    @XmlElementDecl(namespace = \"\", name = \"effect\", scope = Catalogue.Stockage.class)\r\n-    public JAXBElement<String> createCatalogueStockageEffect(String value) {\r\n-        return new JAXBElement<String>(new QName(\"\", \"effect\"), String.class, Catalogue.Stockage.class, value);\r\n-    }\r\n-\r\n-    @XmlElementDecl(namespace = \"\", name = \"term\", scope = Catalogue.Stockage.class)\r\n-    public JAXBElement<String> createCatalogueStockageTerm(String value) {\r\n-        return new JAXBElement<String>(new QName(\"\", \"term\"), String.class, Catalogue.Stockage.class, value);\r\n-    }\r\n-\r\n-}\r\n+\n+package inner_scoped_element;\n+\n+import javax.xml.namespace.QName;\n+import jakarta.xml.bind.JAXBElement;\n+import jakarta.xml.bind.annotation.XmlElementDecl;\n+import jakarta.xml.bind.annotation.XmlRegistry;\n+\n+\n+/**\n+ * This object contains factory methods for each \n+ * Java content interface and Java element interface \n+ * generated in the inner_scoped_element package. \n+ * <p>An ObjectFactory allows you to programatically \n+ * construct new instances of the Java representation \n+ * for XML content. The Java representation of XML \n+ * content can consist of schema derived interfaces \n+ * and classes representing the binding of schema \n+ * type definitions, element declarations and model \n+ * groups.  Factory methods for each of these are \n+ * provided in this class.\n+ * \n+ */\n+@XmlRegistry\n+public class ObjectFactory {\n+\n+    private final static QName _CatalogueStockageStockageCollectionEffect_QNAME = new QName(\"\", \"effect\");\n+    private final static QName _CatalogueStockageStockageCollectionTerm_QNAME = new QName(\"\", \"term\");\n+\n+    /**\n+     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: inner_scoped_element\n+     * \n+     */\n+    public ObjectFactory() {\n+    }\n+\n+    /**\n+     * Create an instance of {@link Catalogue }\n+     * \n+     */\n+    public Catalogue createCatalogue() {\n+        return new Catalogue();\n+    }\n+\n+    /**\n+     * Create an instance of {@link Catalogue.StockageStockage }\n+     * \n+     */\n+    public Catalogue.StockageStockage createCatalogueStockageStockage() {\n+        return new Catalogue.StockageStockage();\n+    }\n+\n+    @XmlElementDecl(namespace = \"\", name = \"effect\", scope = Catalogue.StockageStockage.class)\n+    public JAXBElement<String> createCatalogueStockageStockageEffect(String value) {\n+        return new JAXBElement<String>(new QName(\"\", \"effect\"), String.class, Catalogue.StockageStockage.class, value);\n+    }\n+\n+    @XmlElementDecl(namespace = \"\", name = \"term\", scope = Catalogue.StockageStockage.class)\n+    public JAXBElement<String> createCatalogueStockageStockageTerm(String value) {\n+        return new JAXBElement<String>(new QName(\"\", \"term\"), String.class, Catalogue.StockageStockage.class, value);\n+    }\n+\n+}\ndiff --git a/src/test/resources/com/sun/tools/xjc/addon/xew/inner-scoped-element.xml b/src/test/resources/com/sun/tools/xjc/addon/xew/inner-scoped-element.xml\nindex 9d8d955..f8f948d 100644\n--- a/src/test/resources/com/sun/tools/xjc/addon/xew/inner-scoped-element.xml\n+++ b/src/test/resources/com/sun/tools/xjc/addon/xew/inner-scoped-element.xml\n@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <catalogue xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"inner-scoped-element.xsd\">\n-\t<stockage_collection>\n+\t<stockage>\n \t\t<stockage>\n \t\t\t<collection>\n \t\t\t\t<term>solar panels</term>\n@@ -15,5 +15,5 @@\n \t\t\t\t<effect>maintenance costs</effect>\n \t\t\t</collection>\n \t\t</stockage>\n-\t</stockage_collection>\n+\t</stockage>\n </catalogue>\ndiff --git a/src/test/resources/com/sun/tools/xjc/addon/xew/inner-scoped-element.xsd b/src/test/resources/com/sun/tools/xjc/addon/xew/inner-scoped-element.xsd\nindex 7f2fac9..64885ae 100644\n--- a/src/test/resources/com/sun/tools/xjc/addon/xew/inner-scoped-element.xsd\n+++ b/src/test/resources/com/sun/tools/xjc/addon/xew/inner-scoped-element.xsd\n@@ -16,7 +16,8 @@\n \t<xsd:element name=\"catalogue\">\r\n \t\t<xsd:complexType>\r\n \t\t\t<xsd:sequence>\r\n-\t\t\t\t<xsd:element name=\"stockage_collection\">\r\n+                <!-- Also tests the scenario when element/class names collide within parent class. -->\r\n+\t\t\t\t<xsd:element name=\"stockage\">\r\n \t\t\t\t\t<xsd:complexType>\r\n \t\t\t\t\t\t<xsd:sequence minOccurs=\"0\">\r\n \t\t\t\t\t\t\t<xsd:element name=\"stockage\" minOccurs=\"0\" maxOccurs=\"unbounded\">\r\n", "test_patch_file_extensions": ["java", "xml", "xsd"], "non_code_patch": "", "non_code_patch_file_extensions": [], "change_type": "SOURCE_ONLY", "actions_runs": [[{"failed": false, "tests": [{"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAsParametrisationPublisher", "time": 3.12, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerElementWithValueObjects", "time": 0.532, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidInstantiationMode", "time": 0.006, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerScopedElement", "time": 0.398, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testDifferentNamespacesForWrapperAndElement", "time": 0.0, "results": [{"result": "Skipped", "message": "This test works reliably on Java7 but produces different results from run to run on Java8, see https://github.com/eclipse-ee4j/jaxb-ri/issues/1682", "type": null}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUsage", "time": 0.01, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testToString", "time": 0.016, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testAnnotationReference", "time": 0.19, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUnknownOption", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithAdapter", "time": 0.087, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAsParametrisationFamily", "time": 0.106, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementReservedWord", "time": 0.115, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithParent", "time": 0.191, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementNameCollision", "time": 0.152, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithCustomization", "time": 0.115, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAny", "time": 0.087, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testSubstitutionGroups", "time": 0.141, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementListExtended", "time": 0.066, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidCustomization", "time": 0.015, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidControlFile", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerElement", "time": 0.245, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementMixed", "time": 0.173, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUnqualifiedSchema", "time": 0.093, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementScoped", "time": 0.134, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAnyType", "time": 0.132, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidCollectionClass", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/225996e9-348c-4b24-adaa-bf4805dd1169/.github/workflows/main-crawler.yaml", "type": "maven"}, "workflow_name": "35af50fd-84d4-45cc-91e1-b877f9490d8e", "build_tool": "maven", "elapsed_time": 86.13015699386597, "default_actions": false}], [{"failed": false, "tests": [{"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAsParametrisationPublisher", "time": 3.052, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerElementWithValueObjects", "time": 0.584, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidInstantiationMode", "time": 0.005, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerScopedElement", "time": 0.064, "results": [{"result": "Failure", "message": "\nMultiple Failures (2 failures)\n-- failure 1 --\n[For Catalogue.java in src/test/generated_resources/inner_scoped_element] \nPath:\n  target/test/generated_xsd_classes/inner_scoped_element/Catalogue.java\nand path:\n  src/test/generated_resources/inner_scoped_element/Catalogue.java\ndo not have same content:\n\nChanged content at line 76:\nexpecting:\n  [\"    protected List<Catalogue.StockageStockage> stockage = new ArrayList<Catalogue.StockageStockage>();\"]\nbut was:\n  [\"    protected List<Catalogue.Stockage> stockage = new ArrayList<Catalogue.Stockage>();\"]\n\nChanged content at line 78:\nexpecting:\n  [\"    public List<Catalogue.StockageStockage> getStockage() {\"]\nbut was:\n  [\"    public List<Catalogue.Stockage> getStockage() {\"]\n\nChanged content at line 82:\nexpecting:\n  [\"    public void setStockage(List<Catalogue.StockageStockage> stockage) {\"]\nbut was:\n  [\"    public void setStockage(List<Catalogue.Stockage> stockage) {\"]\n\nChanged content at line 121:\nexpecting:\n  [\"    public static class StockageStockage {\"]\nbut was:\n  [\"    public static class Stockage {\"]\nat XmlElementWrapperPluginTest.runTest(XmlElementWrapperPluginTest.java:366)\n-- failure 2 --\n[For ObjectFactory.java in src/test/generated_resources/inner_scoped_element] \nPath:\n  target/test/generated_xsd_classes/inner_scoped_element/ObjectFactory.java\nand path:\n  src/test/generated_resources/inner_scoped_element/ObjectFactory.java\ndo not have same content:\n\nChanged content at line 46:\nexpecting:\n  [\"     * Create an instance of {@link Catalogue.StockageStockage }\"]\nbut was:\n  [\"     * Create an instance of {@link Catalogue.Stockage }\"]\n\nChanged content at line 49:\nexpecting:\n  [\"    public Catalogue.StockageStockage createCatalogueStockageStockage() {\",\n   \"        return new Catalogue.StockageStockage();\"]\nbut was:\n  [\"    public Catalogue.Stockage createCatalogueStockage() {\",\n   \"        return new Catalogue.Stockage();\"]\n\nChanged content at line 53:\nexpecting:\n  [\"    @XmlElementDecl(namespace = \"\", name = \"effect\", scope = Catalogue.StockageStockage.class)\",\n   \"    public JAXBElement<String> createCatalogueStockageStockageEffect(String value) {\",\n   \"        return new JAXBElement<String>(new QName(\"\", \"effect\"), String.class, Catalogue.StockageStockage.class, value);\"]\nbut was:\n  [\"    @XmlElementDecl(namespace = \"\", name = \"effect\", scope = Catalogue.Stockage.class)\",\n   \"    public JAXBElement<String> createCatalogueStockageEffect(String value) {\",\n   \"        return new JAXBElement<String>(new QName(\"\", \"effect\"), String.class, Catalogue.Stockage.class, value);\"]\n\nChanged content at line 58:\nexpecting:\n  [\"    @XmlElementDecl(namespace = \"\", name = \"term\", scope = Catalogue.StockageStockage.class)\",\n   \"    public JAXBElement<String> createCatalogueStockageStockageTerm(String value) {\",\n   \"        return new JAXBElement<String>(new QName(\"\", \"term\"), String.class, Catalogue.StockageStockage.class, value);\"]\nbut was:\n  [\"    @XmlElementDecl(namespace = \"\", name = \"term\", scope = Catalogue.Stockage.class)\",\n   \"    public JAXBElement<String> createCatalogueStockageTerm(String value) {\",\n   \"        return new JAXBElement<String>(new QName(\"\", \"term\"), String.class, Catalogue.Stockage.class, value);\"]\nat XmlElementWrapperPluginTest.runTest(XmlElementWrapperPluginTest.java:366)", "type": "org.assertj.core.error.AssertJMultipleFailuresError"}], "stdout": null, "stderr": "[INFO] [XJC] parsing a schema...\n[INFO] [XJC] compiling a schema...\n[INFO] [XJC] [INFO] generating code\n[INFO] [XJC] unknown location\n[INFO] [XJC] \n[INFO] Compilation:\n[INFO]   JAXB version         : 3.0.1\n[INFO]   Control file         : <none>\n[INFO]   Summary file         : <none>\n[INFO]   Instantiation mode   : EARLY\n[INFO]   Collection impl      : java.util.ArrayList\n[INFO]   Collection interface : java.util.List\n[INFO]   Plural form          : false\n[INFO] \n[INFO] Candidates:\n[INFO] \t[+]: inner_scoped_element.Catalogue.Stockage\n[INFO] \t[+]: inner_scoped_element.Catalogue.Stockage.Stockage.Collection\n[INFO] \t2 candidate(s) being considered.\n[INFO] \n[INFO] Modifications:\n[INFO] \tReplacing field [Stockage inner_scoped_element.Catalogue#stockage]\n[INFO] \tMoving inner class inner_scoped_element.Catalogue.Stockage.Stockage to class inner_scoped_element.Catalogue\n[INFO] \tRenamed createCatalogueStockageStockage -> createCatalogueStockage in inner_scoped_element.ObjectFactory\n[INFO] \tRenamed createCatalogueStockageStockageCollection -> createCatalogueStockageCollection in inner_scoped_element.ObjectFactory\n[INFO] \tRenamed createCatalogueStockageStockageCollectionEffect -> createCatalogueStockageCollectionEffect in inner_scoped_element.ObjectFactory\n[INFO] \tRenamed createCatalogueStockageStockageCollectionTerm -> createCatalogueStockageCollectionTerm in inner_scoped_element.ObjectFactory\n[INFO] \tReplacing field [Collection inner_scoped_element.Catalogue.Stockage#collection]\n[INFO] \t5 modification(s) to original code.\n[INFO] \n[INFO] Deletions:\n[INFO] \tRemoving class inner_scoped_element.Catalogue.Stockage.Collection from class inner_scoped_element.Catalogue.Stockage\n[INFO] \tRemoving factory method [inner_scoped_element.Catalogue.Stockage.Collection#createCatalogueStockageCollection()] from inner_scoped_element.ObjectFactory\n[INFO] \tRemoving factory method [jakarta.xml.bind.JAXBElement<java.lang.String>#createCatalogueStockageCollectionEffect()] from inner_scoped_element.ObjectFactory\n[INFO] \tRemoving factory method [jakarta.xml.bind.JAXBElement<java.lang.String>#createCatalogueStockageCollectionTerm()] from inner_scoped_element.ObjectFactory\n[INFO] \tRemoving class inner_scoped_element.Catalogue.Stockage from class inner_scoped_element.Catalogue\n[INFO] \tRemoving factory method [inner_scoped_element.Catalogue.Stockage#createCatalogueStockage()] from inner_scoped_element.ObjectFactory\n[INFO] \t6 deletion(s) from original code.\n[INFO] \n[INFO] [XJC] inner_scoped_element/Catalogue.java\n[INFO] [XJC] inner_scoped_element/ObjectFactory.java\n"}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testDifferentNamespacesForWrapperAndElement", "time": 0.0, "results": [{"result": "Skipped", "message": "This test works reliably on Java7 but produces different results from run to run on Java8, see https://github.com/eclipse-ee4j/jaxb-ri/issues/1682", "type": null}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUsage", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testToString", "time": 0.008, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testAnnotationReference", "time": 0.161, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUnknownOption", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithAdapter", "time": 0.074, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAsParametrisationFamily", "time": 0.064, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementReservedWord", "time": 0.065, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithParent", "time": 0.255, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementNameCollision", "time": 0.104, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithCustomization", "time": 0.097, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAny", "time": 0.091, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testSubstitutionGroups", "time": 0.129, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementListExtended", "time": 0.062, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidCustomization", "time": 0.014, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidControlFile", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerElement", "time": 0.192, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementMixed", "time": 0.192, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUnqualifiedSchema", "time": 0.062, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementScoped", "time": 0.096, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAnyType", "time": 0.181, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidCollectionClass", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/225996e9-348c-4b24-adaa-bf4805dd1169/.github/workflows/main-crawler.yaml", "type": "maven"}, "workflow_name": "34161778-f7a0-4a78-8b0b-309a8f5bf147", "build_tool": "maven", "elapsed_time": 108.7147388458252, "default_actions": false}], [{"failed": false, "tests": [{"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAsParametrisationPublisher", "time": 3.732, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerElementWithValueObjects", "time": 0.69, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidInstantiationMode", "time": 0.005, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerScopedElement", "time": 0.28, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testDifferentNamespacesForWrapperAndElement", "time": 0.0, "results": [{"result": "Skipped", "message": "This test works reliably on Java7 but produces different results from run to run on Java8, see https://github.com/eclipse-ee4j/jaxb-ri/issues/1682", "type": null}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUsage", "time": 0.007, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testToString", "time": 0.012, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testAnnotationReference", "time": 0.171, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUnknownOption", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithAdapter", "time": 0.077, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAsParametrisationFamily", "time": 0.069, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementReservedWord", "time": 0.082, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithParent", "time": 0.108, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementNameCollision", "time": 0.107, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementWithCustomization", "time": 0.066, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAny", "time": 0.062, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testSubstitutionGroups", "time": 0.102, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementListExtended", "time": 0.046, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidCustomization", "time": 0.009, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidControlFile", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInnerElement", "time": 0.13, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementMixed", "time": 0.097, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testUnqualifiedSchema", "time": 0.053, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementScoped", "time": 0.099, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testElementAnyType", "time": 0.088, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "com.sun.tools.xjc.addon.xew.XmlElementWrapperPluginTest", "name": "testInvalidCollectionClass", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/225996e9-348c-4b24-adaa-bf4805dd1169/.github/workflows/main-crawler.yaml", "type": "maven"}, "workflow_name": "b3e8bea9-ed15-4252-848a-1a9bc6c2bc34", "build_tool": "maven", "elapsed_time": 101.25195550918579, "default_actions": false}]], "strategy": "PASS_PASS", "issues": [{"id": 74, "title": "Different behavior on linux/windows when wrapper element has same name as list element", "body": "I have stumbled on a bug in jaxb-xew-plugin, that leads to different code being generated when the plugin is run on linux and windows machines.\r\nIt happens in a specific case, when the XSD contains a list with a wrapper element and the wrapper and list elements have the same name. E.g.: \r\n```xml\r\n<xsd:element name=\"RootElement\">\r\n    <xsd:complexType>\r\n        <xsd:sequence>\r\n            <xsd:element name=\"TestList\" minOccurs=\"0\">\r\n                <xsd:complexType>\r\n                    <xsd:sequence>\r\n                        <xsd:element name=\"TestList\" maxOccurs=\"unbounded\">\r\n                            <xsd:complexType>\r\n                                <xsd:sequence>\r\n                                    <xsd:element name=\"SomeField\" type=\"xsd:string\"/>\r\n                                </xsd:sequence>\r\n                            </xsd:complexType>\r\n                        </xsd:element>\r\n                    </xsd:sequence>\r\n                </xsd:complexType>\r\n            </xsd:element>\r\n        </xsd:sequence>\r\n    </xsd:complexType>\r\n</xsd:element>\r\n```\r\n\r\nWhen run on windows, the generated jaxb RootElement class has a list field, that looks like this:\r\n```java\r\n@XmlElementWrapper(name = \"TestList\")\r\n@XmlElement(name = \"TestList\", namespace = \"...\")\r\nprotected List<RootElement.TestListTestList> testList = new ArrayList<RootElement.TestListTestList>();\r\n```\r\n, but when run on linux, a different signature is generated:\r\n```java\r\n@XmlElementWrapper(name = \"TestList\")\r\n@XmlElement(name = \"TestList\", namespace = \"...\")\r\nprotected List<RootElement.TestList> testList = new ArrayList<RootElement.TestList>();\r\n```\r\nThe names of the list element class are different, i.e. RootElement.TestListTestList on windows vs RootElement.TestList on linux.\r\n\r\nIt seems, that [this block](https://github.com/dmak/jaxb-xew-plugin/blob/f2320aaa24d70d087ff24edc326912ac22d1acb8/src/main/java/com/sun/tools/xjc/addon/xew/XmlElementWrapperPlugin.java#L907C1-L910C4), that renames the class when the name is in conflict with an existing class, does not work correctly when running on a case-sensitive filesystem. That's because on a case-sensitive filesystem, the JDefinedClass#classes has class names in uppercase and then `classes.containsKey(clazz.name())` always returns false.\r\n\r\nI have prepared a test example: [xew-test-case.zip](https://github.com/dmak/jaxb-xew-plugin/files/12381662/xew-test-case.zip), that works fine on windows, but fails to compile on linux.", "comments": ["Indeed there is something strange going on. Windows log (compiles fine):\r\n```\r\n[INFO] Candidates:\r\n[INFO] \t[+]: xew.jbo.cz.xew_test_case.RootElement.TestList\r\n[INFO] \t1 candidate(s) being considered.\r\n[INFO] \r\n[INFO] Modifications:\r\n[INFO] \tReplacing field [TestList xew.jbo.cz.xew_test_case.RootElement#testList]\r\n[INFO] \tMoving inner class xew.jbo.cz.xew_test_case.RootElement.TestList.TestList to class xew.jbo.cz.xew_test_case.RootElement\r\n[INFO] \tRenaming class xew.jbo.cz.xew_test_case.RootElement.TestList.TestList to class TestListTestList\r\n[INFO] \tRenamed createRootElementTestListTestList -> createRootElementTestListTestList in xew.jbo.cz.xew_test_case.ObjectFactory\r\n[INFO] \t2 modification(s) to original code.\r\n[INFO] \r\n[INFO] Deletions:\r\n[INFO] \tRemoving class xew.jbo.cz.xew_test_case.RootElement.TestList from class xew.jbo.cz.xew_test_case.RootElement\r\n[INFO] \tRemoving factory method [xew.jbo.cz.xew_test_case.RootElement.TestList#createRootElementTestList()] from xew.jbo.cz.xew_test_case.ObjectFactory\r\n[INFO] \t2 deletion(s) from original code.\r\n```\r\nLinux log (class renaming does not occur and as a result the project does not compile):\r\n```\r\n[INFO] Candidates:\r\n[INFO] \t[+]: xew.jbo.cz.xew_test_case.RootElement.TestList\r\n[INFO] \t1 candidate(s) being considered.\r\n[INFO] \r\n[INFO] Modifications:\r\n[INFO] \tReplacing field [TestList xew.jbo.cz.xew_test_case.RootElement#testList]\r\n[INFO] \tMoving inner class xew.jbo.cz.xew_test_case.RootElement.TestList.TestList to class xew.jbo.cz.xew_test_case.RootElement\r\n[INFO] \tRenamed createRootElementTestListTestList -> createRootElementTestList in xew.jbo.cz.xew_test_case.ObjectFactory\r\n[INFO] \t2 modification(s) to original code.\r\n[INFO] \r\n[INFO] Deletions:\r\n[INFO] \tRemoving class xew.jbo.cz.xew_test_case.RootElement.TestList from class xew.jbo.cz.xew_test_case.RootElement\r\n[INFO] \tRemoving factory method [xew.jbo.cz.xew_test_case.RootElement.TestList#createRootElementTestList()] from xew.jbo.cz.xew_test_case.ObjectFactory\r\n[INFO] \t2 deletion(s) from original code.\r\n[INFO] -------------------------------------------------------------\r\n[ERROR] COMPILATION ERROR : \r\n[INFO] -------------------------------------------------------------\r\n[ERROR] /mnt/xew-test-case/src/main/java/cz/jbo/xew/Main.java:[10,26] cannot find symbol\r\n  symbol:   class TestListTestList\r\n  location: class xew.jbo.cz.xew_test_case.RootElement\r\n[ERROR] /mnt/xew-test-case/src/main/java/cz/jbo/xew/Main.java:[10,73] cannot find symbol\r\n  symbol:   class TestListTestList\r\n  location: class xew.jbo.cz.xew_test_case.RootElement\r\n```\r\nIt turned out that JAXB classes `JPackage` and `JDefinedClass` implement `isCaseSensitiveFileSystem` flag requirement differently and at the end `JPackage` should be treated differently \ud83d\ude2d I will ignore that for the moment, but name a note...", "The issue should be fixed, try [jaxb-xew-plugin-2.2-20230820.234133-1.jar](https://oss.sonatype.org/content/repositories/snapshots/com/github/jaxb-xew-plugin/jaxb-xew-plugin/2.2-SNAPSHOT/jaxb-xew-plugin-2.2-20230820.234133-1.jar). As a temporary measure you could replace released jar with that one. True release will happen somewhen later this year, let me know if that is burning for you."], "labels": [], "is_pull_request": false, "review_comments": null}]}
