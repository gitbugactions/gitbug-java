{"repository": "GoSimpleLLC/nbvcxz", "language": "java", "clone_url": "https://github.com/GoSimpleLLC/nbvcxz.git", "collection_timestamp": "2023-11-23T23:35:55.721245Z", "commit_hash": "ee8d5c62f4fbba1b975a1e8675abb5dff3ef4cb6", "commit_message": "Fix for DOS attack\n", "commit_timestamp": "2023-01-27T19:56:21Z", "previous_commit_hash": "122c97d9eb71575bd12cf5c22e2ccd70ce826e62", "previous_commit_message": "Merge branch 'main' into dev\n\n# Conflicts:\n#\tpom.xml\n", "previous_commit_timestamp": "2023-01-27T03:17:26Z", "time_to_patch": "16:38:55", "bug_patch": "diff --git a/src/main/java/me/gosimple/nbvcxz/matching/DictionaryMatcher.java b/src/main/java/me/gosimple/nbvcxz/matching/DictionaryMatcher.java\nindex fab3689..17daaaa 100644\n--- a/src/main/java/me/gosimple/nbvcxz/matching/DictionaryMatcher.java\n+++ b/src/main/java/me/gosimple/nbvcxz/matching/DictionaryMatcher.java\n@@ -298,27 +298,29 @@ public final class DictionaryMatcher implements PasswordMatcher\n                     }\n \n                     // Only do unleet if it's different than the regular lower.\n-                    final List<String> unleet_list = translateLeet(configuration, lower_part);\n-                    for (final String unleet_part : unleet_list)\n+                    if (dictionary.getMaxLength() > split_password.length())\n                     {\n-                        final Integer unleet_rank = dictionary.getDictonary().get(unleet_part);\n-                        if (unleet_rank != null)\n+                        final List<String> unleet_list = translateLeet(configuration, lower_part);\n+                        for (final String unleet_part : unleet_list)\n                         {\n-                            final List<Character[]> subs = getLeetSub(lower_part, unleet_part);\n-                            matches.add(new DictionaryMatch(split_password, configuration, start, end - 1, unleet_part, unleet_rank, subs, dictionary.isExclusion(), false, dictionary.getDictionaryName(), 0));\n-                            continue;\n-                        }\n-\n-                        // Only do reversed if it's different than unleet.\n-                        final String reversed_unleet_part = new StringBuilder(unleet_part).reverse().toString();\n-                        {\n-                            final Integer reversed_unleet_rank = dictionary.getDictonary().get(reversed_unleet_part);\n-                            if (reversed_unleet_rank != null)\n+                            final Integer unleet_rank = dictionary.getDictonary().get(unleet_part);\n+                            if (unleet_rank != null)\n                             {\n-                                final List<Character[]> subs = getLeetSub(reversed_part, reversed_unleet_part);\n-                                matches.add(new DictionaryMatch(split_password, configuration, start, end - 1, reversed_unleet_part, reversed_unleet_rank, subs, dictionary.isExclusion(), true, dictionary.getDictionaryName(), 0));\n+                                final List<Character[]> subs = getLeetSub(lower_part, unleet_part);\n+                                matches.add(new DictionaryMatch(split_password, configuration, start, end - 1, unleet_part, unleet_rank, subs, dictionary.isExclusion(), false, dictionary.getDictionaryName(), 0));\n                                 continue;\n                             }\n+\n+                            // Only do reversed if it's different than unleet.\n+                            final String reversed_unleet_part = new StringBuilder(unleet_part).reverse().toString();\n+                            {\n+                                final Integer reversed_unleet_rank = dictionary.getDictonary().get(reversed_unleet_part);\n+                                if (reversed_unleet_rank != null)\n+                                {\n+                                    final List<Character[]> subs = getLeetSub(reversed_part, reversed_unleet_part);\n+                                    matches.add(new DictionaryMatch(split_password, configuration, start, end - 1, reversed_unleet_part, reversed_unleet_rank, subs, dictionary.isExclusion(), true, dictionary.getDictionaryName(), 0));\n+                                }\n+                            }\n                         }\n                     }\n \ndiff --git a/src/main/java/me/gosimple/nbvcxz/resources/ConfigurationBuilder.java b/src/main/java/me/gosimple/nbvcxz/resources/ConfigurationBuilder.java\nindex 4fd9616..c76eea0 100644\n--- a/src/main/java/me/gosimple/nbvcxz/resources/ConfigurationBuilder.java\n+++ b/src/main/java/me/gosimple/nbvcxz/resources/ConfigurationBuilder.java\n@@ -204,11 +204,12 @@ public class ConfigurationBuilder\n     }\n \n     /**\n-     * @return The default value for max length is 72.\n+     * @return The default value for max length is 256.\n+     * This should match the exact length your algorithm is limited to (72 for most bcrypt implementations).\n      */\n     public static int getDefaultMaxLength()\n     {\n-        return 72;\n+        return 256;\n     }\n \n     /**\n@@ -349,6 +350,10 @@ public class ConfigurationBuilder\n      * Information will be available in the Result if the password was longer\n      * than maxLength.\n      *\n+     * This should match the exact length your algorithm is limited to (72 for most bcrypt implementations).\n+     * If you arbitrarily limit the input for passwords, ensure the passed in value is either already truncated to\n+     * the correct length, or this value is set to the same length you will truncate to.\n+     *\n      * @param maxLength Value for maxLength (should be a positive value)\n      * @return Builder\n      */\ndiff --git a/src/main/java/me/gosimple/nbvcxz/resources/Dictionary.java b/src/main/java/me/gosimple/nbvcxz/resources/Dictionary.java\nindex c84b6bf..2e44f04 100644\n--- a/src/main/java/me/gosimple/nbvcxz/resources/Dictionary.java\n+++ b/src/main/java/me/gosimple/nbvcxz/resources/Dictionary.java\n@@ -17,6 +17,7 @@ public class Dictionary\n     private final ArrayList<String> sorted_dictionary;\n     private final Map<Integer, Integer> sorted_dictionary_length_lookup;\n     private final boolean exclusion;\n+    private final int max_length;\n \n \n     /**\n@@ -57,7 +58,7 @@ public class Dictionary\n                 sorted_dictionary_length_lookup.put(key.length(), i);\n             }\n         }\n-\n+        int i_max_length = 0;\n         for (int i = 0; i < sorted_dictionary_length_lookup.size(); i++)\n         {\n             if (!sorted_dictionary_length_lookup.containsKey(i))\n@@ -69,7 +70,9 @@ public class Dictionary\n                 }\n                 sorted_dictionary_length_lookup.put(i, sorted_dictionary_length_lookup.get(next_key));\n             }\n+            i_max_length = i;\n         }\n+        max_length = i_max_length;\n     }\n \n     /**\n@@ -123,4 +126,12 @@ public class Dictionary\n     {\n         return this.dictionary_name;\n     }\n+\n+    /**\n+     * The longest length of an entry we should check with this dictionary\n+     * @return the longest value this dictionary contains\n+     */\n+    public int getMaxLength() {\n+        return max_length;\n+    }\n }\n", "bug_patch_file_extensions": ["java"], "test_patch": "diff --git a/src/test/java/me/gosimple/nbvcxz/NbvcxzTest.java b/src/test/java/me/gosimple/nbvcxz/NbvcxzTest.java\nindex d14eae8..24b800d 100644\n--- a/src/test/java/me/gosimple/nbvcxz/NbvcxzTest.java\n+++ b/src/test/java/me/gosimple/nbvcxz/NbvcxzTest.java\n@@ -48,7 +48,7 @@ public class NbvcxzTest\n             for (final EntropyTest test : tests)\n             {\n                 test.run();\n-                Assert.assertEquals(test.getExpectedEntropy(), test.getEntropy(), test.getDelta());\n+                Assert.assertEquals(test.getPassword(), test.getExpectedEntropy(), test.getEntropy(), test.getDelta());\n             }\n         }\n         catch (Exception e)\n@@ -77,7 +77,7 @@ public class NbvcxzTest\n             for (final EntropyTest test : tests)\n             {\n                 test.run();\n-                Assert.assertEquals(test.getExpectedEntropy(), test.getEntropy(), test.getDelta());\n+                Assert.assertEquals(test.getPassword(), test.getExpectedEntropy(), test.getEntropy(), test.getDelta());\n             }\n         }\n         catch (Exception e)\n@@ -115,14 +115,14 @@ public class NbvcxzTest\n         tests.add(new EntropyTest(nbvcxz,\"A Fool and His Money Are Soon Parted\",84.88322715518174D));\n         tests.add(new EntropyTest(nbvcxz,\"6c891879ed0a0bbf701d5ca8af39a766\",124.22235013869417D));\n         tests.add(new EntropyTest(nbvcxz,\"ef00623ced862e84ea15a6f97cb3fbb9f177bd6f23e54459a96ca5926c28c653\",247.06618865413472D));\n-        tests.add(new EntropyTest(nbvcxz,\"shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password\",132.95506049872384D));\n+        tests.add(new EntropyTest(nbvcxz,\"shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password\",360.5676147181065D));\n \n         try\n         {\n             for (final EntropyTest test : tests)\n             {\n                 test.run();\n-                Assert.assertEquals(test.getExpectedEntropy(), test.getEntropy(), test.getDelta());\n+                Assert.assertEquals(test.getPassword(), test.getExpectedEntropy(), test.getEntropy(), test.getDelta());\n             }\n         }\n         catch (Exception e)\n@@ -159,7 +159,7 @@ public class NbvcxzTest\n         tests.add(new EntropyTest(nbvcxz,\"A Fool and His Money Are Soon Parted\",84.88322715518174D));\n         tests.add(new EntropyTest(nbvcxz,\"6c891879ed0a0bbf701d5ca8af39a766\",124.22235013869417D));\n         tests.add(new EntropyTest(nbvcxz,\"ef00623ced862e84ea15a6f97cb3fbb9f177bd6f23e54459a96ca5926c28c653\",247.06618865413472D));\n-        tests.add(new EntropyTest(nbvcxz,\"shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password\",132.95506049872384D));\n+        tests.add(new EntropyTest(nbvcxz,\"shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password\",360.5676147181065D));\n \n         List<Future> futures = new ArrayList<>();\n         try\n@@ -179,7 +179,7 @@ public class NbvcxzTest\n             // Check results\n             for (final EntropyTest test : tests)\n             {\n-                Assert.assertEquals(test.getExpectedEntropy(), test.getEntropy(), test.getDelta());\n+                Assert.assertEquals(test.getPassword(), test.getExpectedEntropy(), test.getEntropy(), test.getDelta());\n             }\n         }\n         catch (Exception e)\n", "test_patch_file_extensions": ["java"], "non_code_patch": "", "non_code_patch_file_extensions": [], "change_type": "SOURCE_ONLY", "actions_runs": [[{"failed": false, "tests": [{"classname": "me.gosimple.nbvcxz.matching.match.SpacialMatchTest", "name": "testCalculateEntropy", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.AdjacencyGraphUtilTest", "name": "testCalcAverageDegree", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.AdjacencyGraphUtilTest", "name": "testNeighborsNumber", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.DictionaryUtilTest", "name": "testLoadFile", "time": 0.259, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DateMatcherTest", "name": "testMatcher", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.SpacialMatcherTest", "name": "testMatch", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.BruteForceUtilTest", "name": "testCalculateBrutForceCardinality", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.DateMatchTest", "name": "testCalculateEntropy", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.YearMatcherTest", "name": "testMatch", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchWithoutLeet", "time": 0.014, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchLD", "time": 0.021, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchWithLeet", "time": 0.042, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.TimeEstimateTest", "name": "testCalculateEntropy", "time": 0.132, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.SequenceMatchTest", "name": "testCalculateEntropy", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.CharacterCaseUtilTest", "name": "fractionOfStringUppercaseDoNotFailOnNullTest", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.CharacterCaseUtilTest", "name": "fractionOfStringUppercaseTest", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.RepeatMatcherTest", "name": "testMatcher", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.ScoreTest", "name": "testBasicScore", "time": 0.123, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.SequenceMatcherTest", "name": "testMatch", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testGetToken", "time": 0.006, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testNCk", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testLog2", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testContructor", "time": 0.01, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.DictionaryMatchTest", "name": "testCalculateEntropy", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.YearMatchTest", "name": "testCalculateEntropy", "time": 0.011, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testEstimate", "time": 2.762, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testEstimateConcurrently", "time": 0.864, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testMaxLength", "time": 0.185, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testExcludeDictionary", "time": 0.121, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.RepeatMatchTest", "name": "testCalculateEntropy", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/1c9a75b4-2007-484f-a945-d6781567f72b/.github/workflows/build-crawler.yml", "type": "maven"}, "workflow_name": "59835e56-a643-41ff-b076-6d990acd68dd", "build_tool": "maven", "elapsed_time": 45.87767291069031, "default_actions": false}], [{"failed": false, "tests": [{"classname": "me.gosimple.nbvcxz.matching.match.SpacialMatchTest", "name": "testCalculateEntropy", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.AdjacencyGraphUtilTest", "name": "testCalcAverageDegree", "time": 0.004, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.AdjacencyGraphUtilTest", "name": "testNeighborsNumber", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.DictionaryUtilTest", "name": "testLoadFile", "time": 0.221, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DateMatcherTest", "name": "testMatcher", "time": 0.015, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.SpacialMatcherTest", "name": "testMatch", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.BruteForceUtilTest", "name": "testCalculateBrutForceCardinality", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.DateMatchTest", "name": "testCalculateEntropy", "time": 0.004, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.YearMatcherTest", "name": "testMatch", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchWithoutLeet", "time": 0.017, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchLD", "time": 0.028, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchWithLeet", "time": 0.064, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.TimeEstimateTest", "name": "testCalculateEntropy", "time": 0.134, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.SequenceMatchTest", "name": "testCalculateEntropy", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.CharacterCaseUtilTest", "name": "fractionOfStringUppercaseDoNotFailOnNullTest", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.CharacterCaseUtilTest", "name": "fractionOfStringUppercaseTest", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.RepeatMatcherTest", "name": "testMatcher", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.ScoreTest", "name": "testBasicScore", "time": 0.181, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.SequenceMatcherTest", "name": "testMatch", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testGetToken", "time": 0.004, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testNCk", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testLog2", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testContructor", "time": 0.008, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.DictionaryMatchTest", "name": "testCalculateEntropy", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.YearMatchTest", "name": "testCalculateEntropy", "time": 0.004, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testEstimate", "time": 2.939, "results": [{"result": "Failure", "message": "shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password expected:<360.5676147181065> but was:<132.95506049872384>", "type": "java.lang.AssertionError"}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testEstimateConcurrently", "time": 0.818, "results": [{"result": "Failure", "message": "shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password_shortened_password expected:<360.5676147181065> but was:<132.95506049872384>", "type": "java.lang.AssertionError"}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testMaxLength", "time": 0.137, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testExcludeDictionary", "time": 0.091, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.RepeatMatchTest", "name": "testCalculateEntropy", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/1c9a75b4-2007-484f-a945-d6781567f72b/.github/workflows/build-crawler.yml", "type": "maven"}, "workflow_name": "85f87032-a4dd-4b18-958d-53f1bba998e3", "build_tool": "maven", "elapsed_time": 38.81351351737976, "default_actions": false}], [{"failed": false, "tests": [{"classname": "me.gosimple.nbvcxz.matching.match.SpacialMatchTest", "name": "testCalculateEntropy", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.AdjacencyGraphUtilTest", "name": "testCalcAverageDegree", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.AdjacencyGraphUtilTest", "name": "testNeighborsNumber", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.DictionaryUtilTest", "name": "testLoadFile", "time": 0.068, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DateMatcherTest", "name": "testMatcher", "time": 0.003, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.SpacialMatcherTest", "name": "testMatch", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.BruteForceUtilTest", "name": "testCalculateBrutForceCardinality", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.DateMatchTest", "name": "testCalculateEntropy", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.YearMatcherTest", "name": "testMatch", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchWithoutLeet", "time": 0.015, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchLD", "time": 0.028, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.DictionaryMatcherTest", "name": "testDictionaryMatchWithLeet", "time": 0.044, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.TimeEstimateTest", "name": "testCalculateEntropy", "time": 0.111, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.SequenceMatchTest", "name": "testCalculateEntropy", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.CharacterCaseUtilTest", "name": "fractionOfStringUppercaseDoNotFailOnNullTest", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.resources.CharacterCaseUtilTest", "name": "fractionOfStringUppercaseTest", "time": 0.001, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.RepeatMatcherTest", "name": "testMatcher", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.scoring.ScoreTest", "name": "testBasicScore", "time": 0.118, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.SequenceMatcherTest", "name": "testMatch", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testGetToken", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testNCk", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testLog2", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.BaseMatchTest", "name": "testContructor", "time": 0.005, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.DictionaryMatchTest", "name": "testCalculateEntropy", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.YearMatchTest", "name": "testCalculateEntropy", "time": 0.002, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testEstimate", "time": 1.402, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testEstimateConcurrently", "time": 0.85, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testMaxLength", "time": 0.089, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.NbvcxzTest", "name": "testExcludeDictionary", "time": 0.076, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}, {"classname": "me.gosimple.nbvcxz.matching.match.RepeatMatchTest", "name": "testCalculateEntropy", "time": 0.0, "results": [{"result": "Passed", "message": "", "type": ""}], "stdout": null, "stderr": null}], "workflow": {"path": "/tmp/1c9a75b4-2007-484f-a945-d6781567f72b/.github/workflows/build-crawler.yml", "type": "maven"}, "workflow_name": "0d738628-8205-4fb7-9063-0c64b85c2225", "build_tool": "maven", "elapsed_time": 45.8236825466156, "default_actions": false}]], "strategy": "PASS_PASS", "issues": []}
